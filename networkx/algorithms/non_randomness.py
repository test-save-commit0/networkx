""" Computation of graph non-randomness
"""
import math
import networkx as nx
from networkx.utils import not_implemented_for
__all__ = ['non_randomness']


@not_implemented_for('directed')
@not_implemented_for('multigraph')
@nx._dispatchable(edge_attrs='weight')
def non_randomness(G, k=None, weight='weight'):
    """Compute the non-randomness of graph G.

    The first returned value nr is the sum of non-randomness values of all
    edges within the graph (where the non-randomness of an edge tends to be
    small when the two nodes linked by that edge are from two different
    communities).

    The second computed value nr_rd is a relative measure that indicates
    to what extent graph G is different from random graphs in terms
    of probability. When it is close to 0, the graph tends to be more
    likely generated by an Erdos Renyi model.

    Parameters
    ----------
    G : NetworkX graph
        Graph must be symmetric, connected, and without self-loops.

    k : int
        The number of communities in G.
        If k is not set, the function will use a default community
        detection algorithm to set it.

    weight : string or None, optional (default=None)
        The name of an edge attribute that holds the numerical value used
        as a weight. If None, then each edge has weight 1, i.e., the graph is
        binary.

    Returns
    -------
    non-randomness : (float, float) tuple
        Non-randomness, Relative non-randomness w.r.t.
        Erdos Renyi random graphs.

    Raises
    ------
    NetworkXException
        if the input graph is not connected.
    NetworkXError
        if the input graph contains self-loops.

    Examples
    --------
    >>> G = nx.karate_club_graph()
    >>> nr, nr_rd = nx.non_randomness(G, 2)
    >>> nr, nr_rd = nx.non_randomness(G, 2, "weight")

    Notes
    -----
    This computes Eq. (4.4) and (4.5) in Ref. [1]_.

    If a weight field is passed, this algorithm will use the eigenvalues
    of the weighted adjacency matrix to compute Eq. (4.4) and (4.5).

    References
    ----------
    .. [1] Xiaowei Ying and Xintao Wu,
           On Randomness Measures for Social Networks,
           SIAM International Conference on Data Mining. 2009
    """
    import numpy as np
    from scipy import linalg

    if not nx.is_connected(G):
        raise nx.NetworkXException("Graph G must be connected.")
    
    if nx.number_of_selfloops(G) > 0:
        raise nx.NetworkXError("Graph G contains self-loops.")

    n = G.number_of_nodes()
    m = G.number_of_edges()

    if k is None:
        # Use a simple community detection algorithm (Girvan-Newman) to set k
        communities = list(nx.community.girvan_newman(G))
        k = len(communities[-1])  # Use the last level of the dendrogram

    # Construct the weighted adjacency matrix
    A = nx.to_numpy_array(G, weight=weight)

    # Compute the eigenvalues of A
    eigenvalues = linalg.eigvals(A)
    eigenvalues.sort()
    eigenvalues = eigenvalues[::-1]  # Sort in descending order

    # Compute non-randomness (nr) using Eq. (4.4)
    nr = sum(eigenvalues[:k]) - (k - 1) * (2 * m / n)

    # Compute relative non-randomness (nr_rd) using Eq. (4.5)
    p = 2 * m / (n * (n - 1))
    expected_nr = n * p * (1 - p) * (k / (k - 1))
    nr_rd = (nr - expected_nr) / expected_nr

    return nr, nr_rd
